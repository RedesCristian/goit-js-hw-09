{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,UAChCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAEtC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAIPR,EAAOgB,iBAAiB,UAAU,SAAAC,GAChCA,EAAEC,iBAMF,IALA,IAAMC,EAAaC,SAASjB,EAAWkB,OACjCC,EAAYF,SAAShB,EAAUiB,OAC/BE,EAAcH,SAASf,EAAOgB,OAC9BG,EAAW,GAERC,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CACpC,IAAMlB,EAAWkB,EAAI,EACfjB,EAAQc,EAAYG,EAAIN,EAC9BK,EAASE,KAAKpB,EAAcC,EAAUC,G,CAGxCgB,EAASG,SAAQ,SAAAC,GACfA,EACGC,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,EAAAjC,GAASkC,OAAOC,QACd,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAGjD2B,OAAM,SAAAL,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,EAAAjC,GAASkC,OAAOI,QACd,sBAAqCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst button = document.querySelector('button');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst delayStep = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nbutton.addEventListener('submit', e => {\n  e.preventDefault();\n  const delayValue = parseInt(firstDelay.value);\n  const stepValue = parseInt(delayStep.value);\n  const amountValue = parseInt(amount.value);\n  const promises = [];\n\n  for (let i = 0; i < amountValue; i++) {\n    const position = i + 1;\n    const delay = stepValue * i + delayValue;\n    promises.push(createPromise(position, delay));\n  }\n\n  promises.forEach(promise => {\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  });\n});\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$button","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delayValue","parseInt","value","stepValue","amountValue","promises","i","push","forEach","promise","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.996f9225.js.map"}